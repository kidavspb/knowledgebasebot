import os
import hashlib

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from secret import *

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
KNOWLEDGE_BASE_PATH = 'knowledge_base'

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ö–µ—à–µ–π
user_paths = {}
path_hash_map = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MD5-—Ö–µ—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
def generate_hash(path):
    return hashlib.md5(path.encode()).hexdigest()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
def generate_keyboard(path):
    items = os.listdir(path)
    keyboard = InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
    for item in items:
        full_path = os.path.join(path, item)
        item_hash = generate_hash(full_path)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        path_hash_map[item_hash] = full_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à–∞ –∏ –ø—É—Ç–∏

        if os.path.isdir(full_path):
            keyboard.add(InlineKeyboardButton(f'üìÅ {item}', callback_data=f'folder:{item_hash}'))
        elif item.endswith('.txt'):
            keyboard.add(InlineKeyboardButton(f'üìÑ {item[:-4]}', callback_data=f'file:{item_hash}'))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –º—ã –Ω–µ –≤ –∫–æ—Ä–Ω–µ
    if path != KNOWLEDGE_BASE_PATH:
        parent_hash = generate_hash(os.path.dirname(path))
        path_hash_map[parent_hash] = os.path.dirname(path)
        keyboard.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'back:{parent_hash}'))

    return keyboard


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'], func=lambda message: message.chat.id in access_list)
def start(message):
    chat_id = message.chat.id
    logging.info(f"Start message from user @{message.from_user.username} ({chat_id})")
    user_paths[chat_id] = KNOWLEDGE_BASE_PATH  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    keyboard = generate_keyboard(KNOWLEDGE_BASE_PATH)
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    data = call.data

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –ø–∞–ø–∫–∞
    if data.startswith('folder:'):
        folder_hash = data.split(':', 1)[1]
        folder_path = path_hash_map.get(folder_hash)

        if folder_path:
            logging.info(f'User @{call.message.chat.username} ({chat_id}) selected folder: {folder_path}')
            user_paths[chat_id] = folder_path  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = generate_keyboard(folder_path)
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                                  reply_markup=keyboard)
        else:
            logging.warning(
                f'Folder path not found for hash: {folder_hash}')  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (answer?)
            bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
            start(call.message)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ —Ç–µ–º–∞ (—Ñ–∞–π–ª)
    elif data.startswith('file:'):
        file_hash = data.split(':', 1)[1]
        file_path = path_hash_map.get(file_hash)

        if file_path:
            logging.info(f'User @{call.message.chat.username} ({chat_id}) selected file: {file_path}')
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            bot.send_message(chat_id=chat_id, text=content, parse_mode='HTML',
                             reply_markup=InlineKeyboardMarkup().add(
                                 InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')))
        else:
            logging.warning(f'File path not found for hash: {file_hash}')
            bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
            start(call.message)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    elif data.startswith('back:'):
        parent_hash = data.split(':', 1)[1]
        parent_path = path_hash_map.get(parent_hash)

        if parent_path:
            logging.info(
                f'User @{call.message.chat.username} ({chat_id}) pressed back button, navigating to: {parent_path}')
            user_paths[chat_id] = parent_path  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = generate_keyboard(parent_path)
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                                  reply_markup=keyboard)
        else:
            logging.warning(f'Parent path not found for hash: {parent_hash}')
            bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
            start(call.message)

    elif data == 'close':
        logging.info(f'Close button pressed by user @{call.message.chat.username} ({chat_id})')
        bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)


while True:
    try:
        bot.polling(none_stop=True)
        logging.info("Bot running..")
    except Exception as e:
        logging.error(e)
        bot.stop_polling()
        time.sleep(15)
        logging.info("Running again!")
